import type { PerfOptions, PerfOutput, PerfComponents, PerfInit, Perf as PerfInterface } from './index.js';
import type { Startable } from '@libp2p/interface';
import type { IncomingStreamData } from '@libp2p/interface-internal';
import type { Multiaddr } from '@multiformats/multiaddr';
export declare class Perf implements Startable, PerfInterface {
    private readonly log;
    readonly protocol: string;
    private readonly components;
    private started;
    private readonly databuf;
    private readonly writeBlockSize;
    private readonly maxInboundStreams;
    private readonly maxOutboundStreams;
    private readonly runOnTransientConnection;
    constructor(components: PerfComponents, init?: PerfInit);
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    handleMessage(data: IncomingStreamData): Promise<void>;
    measurePerformance(ma: Multiaddr, sendBytes: number, receiveBytes: number, options?: PerfOptions): AsyncGenerator<PerfOutput>;
}
//# sourceMappingURL=perf-service.d.ts.map