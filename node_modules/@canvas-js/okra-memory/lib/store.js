import { MemoryLevel } from "memory-level";
export class MemoryStore {
    db = new MemoryLevel({ keyEncoding: "view", valueEncoding: "view" });
    async close() {
        await this.db.close();
    }
    async get(key) {
        try {
            return await this.db.get(key);
        }
        catch (err) {
            // TODO: switch to `err instanceof ModuleError` when memory-level fixes their shit
            if (err.code === "LEVEL_NOT_FOUND") {
                return null;
            }
            else {
                throw err;
            }
        }
    }
    async set(key, value) {
        await this.db.put(key, value);
    }
    async delete(key) {
        await this.db.del(key);
    }
    async *entries(lowerBound = null, upperBound = null, { reverse = false } = {}) {
        const iterOptions = { reverse };
        if (lowerBound) {
            if (lowerBound.inclusive) {
                iterOptions.gte = lowerBound.key;
            }
            else {
                iterOptions.gt = lowerBound.key;
            }
        }
        if (upperBound) {
            if (upperBound.inclusive) {
                iterOptions.lte = upperBound.key;
            }
            else {
                iterOptions.lt = upperBound.key;
            }
        }
        yield* this.db.iterator(iterOptions);
    }
}
