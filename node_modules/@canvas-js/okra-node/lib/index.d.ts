import { KeyValueStore, Bound, Entry, Node, Key, Source, Target, Awaitable } from "@canvas-js/okra";
declare const okra: any;
export type DatabaseName = string | null;
export type DatabaseID = number;
export interface EnvironmentOptions {
    mapSize?: number;
    databases?: number;
}
export declare class Environment extends okra.Environment {
    #private;
    readonly path: string;
    constructor(path: string, options?: EnvironmentOptions);
    close(): Promise<void>;
    resize(mapSize: number): Promise<void>;
    read<T>(callback: (txn: Transaction) => Awaitable<T>, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): Promise<T>;
    readTree<T>(callback: (tree: Tree) => Awaitable<T>, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): Promise<T>;
    write<T>(callback: (txn: Transaction) => Awaitable<T>, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): Promise<T>;
    writeTree<T>(callback: (tree: Tree) => Awaitable<T>, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): Promise<T>;
}
export interface TransactionOptions {
    readOnly?: boolean;
    parent?: Transaction;
    dbi?: DatabaseName | DatabaseID;
}
export declare class Transaction extends okra.Transaction implements KeyValueStore {
    #private;
    readonly env: Environment;
    readonly readOnly: boolean;
    readonly parent: Transaction | null;
    constructor(env: Environment, options?: TransactionOptions);
    openDatabase(dbi: DatabaseName): DatabaseID;
    abort(): void;
    commit(): void;
    get(key: Uint8Array, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): Uint8Array | null;
    set(key: Uint8Array, value: Uint8Array, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): void;
    delete(key: Uint8Array, options?: {
        dbi?: DatabaseName | DatabaseID;
    }): void;
    entries(lowerBound?: Bound<Uint8Array> | null, upperBound?: Bound<Uint8Array> | null, options?: {
        dbi?: DatabaseName | DatabaseID;
        reverse?: boolean;
    }): AsyncIterableIterator<Entry>;
}
export interface CursorOptions {
    dbi?: DatabaseName | DatabaseID;
}
export declare class Cursor extends okra.Cursor {
    #private;
    readonly txn: Transaction;
    readonly dbi: number;
    constructor(txn: Transaction, options?: CursorOptions);
    close(): void;
    goToStart(lowerBound: Bound<Uint8Array> | null): Uint8Array | null;
    goToEnd(upperBound: Bound<Uint8Array> | null): Uint8Array | null;
    getCurrentEntry(): Entry;
    getCurrentKey(): Uint8Array;
    getCurrentValue(): Uint8Array;
    setCurrentValue(value: Uint8Array): void;
    deleteCurrentKey(): void;
    goToNext(): Uint8Array | null;
    goToPrevious(): Uint8Array | null;
    goToFirst(): Uint8Array | null;
    goToLast(): Uint8Array | null;
    goToKey(key: Uint8Array): void;
    seek(needle: Uint8Array): Uint8Array | null;
}
export interface TreeOptions {
    dbi?: DatabaseName | DatabaseID;
}
export declare class Tree extends okra.Tree implements KeyValueStore, Source, Target {
    #private;
    readonly txn: Transaction;
    readonly dbi: number;
    constructor(txn: Transaction, options?: TreeOptions);
    close(): void;
    get(key: Uint8Array): Uint8Array | null;
    set(key: Uint8Array, value: Uint8Array): void;
    delete(key: Uint8Array): void;
    entries(lowerBound?: Bound<Uint8Array> | null, upperBound?: Bound<Uint8Array> | null, options?: {
        reverse?: boolean;
    }): AsyncIterableIterator<Entry>;
    getRoot(): Node;
    getNode(level: number, key: Key): Node | null;
    getChildren(level: number, key: Key): Node[];
    nodes(level: number, lowerBound?: Bound<Key> | null, upperBound?: Bound<Key> | null, options?: {
        reverse?: boolean;
    }): AsyncIterableIterator<Node>;
}
export declare class Iterator extends okra.Iterator {
    #private;
    readonly tree: Tree;
    constructor(tree: Tree, level: number, lowerBound?: Bound<Key> | null, upperBound?: Bound<Key> | null, options?: {
        reverse?: boolean;
    });
    close(): void;
    next(): Node | null;
}
export {};
//# sourceMappingURL=index.d.ts.map