import { blake3 } from "@noble/hashes/blake3";
import { NodeStore } from "./store.js";
import { assert } from "./utils.js";
import { DEFAULT_METADATA } from "./constants.js";
export class Builder extends NodeStore {
    static async open(store, metadata = DEFAULT_METADATA) {
        const builder = new Builder(store, metadata);
        await builder.initialize();
        await builder.setNode({ level: 0, key: null, hash: builder.getLeafAnchorHash() });
        return builder;
    }
    nodeCount = 1;
    async set(key, value) {
        const hash = this.hashEntry(key, value);
        await this.setNode({ level: 0, key, hash, value });
        this.nodeCount += 1;
    }
    async finalize() {
        let level = 0;
        while (this.nodeCount > 1) {
            this.nodeCount = await this.buildLevel(level++);
        }
        const root = await this.getNode(level, null);
        assert(root !== null, "root not found");
        return root;
    }
    async buildLevel(level) {
        const iter = this.nodes(level);
        const next = () => iter.next().then(({ done, value }) => (done ? null : value));
        try {
            let nodeCount = 0;
            let node = await next();
            assert(node !== null, "level is empty");
            assert(node.level === level && node.key === null, "first node was not an anchor");
            let key = node.key;
            let hash = blake3.create({ dkLen: this.metadata.K });
            hash.update(node.hash);
            while (true) {
                node = await next();
                if (node === null) {
                    await this.setNode({ level: level + 1, key, hash: hash.digest() });
                    nodeCount++;
                    break;
                }
                assert(node.level === level, "unexpected node level");
                if (this.isSplit(node.hash)) {
                    await this.setNode({ level: level + 1, key, hash: hash.digest() });
                    nodeCount++;
                    key = node.key;
                    hash = blake3.create({ dkLen: this.metadata.K });
                    hash.update(node.hash);
                }
                else {
                    hash.update(node.hash);
                }
            }
            return nodeCount;
        }
        finally {
            if (iter.return !== undefined) {
                const { done, value } = await iter.return();
                assert(done && value === undefined); // ???
            }
        }
    }
}
