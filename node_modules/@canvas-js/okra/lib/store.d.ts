import type { Key, Node, KeyValueStore, Entry, Metadata, Bound } from "./interface.js";
/**
 * NodeStore is an internal class that Tree and Builder both extend.
 * Its only purpose is to encapsulate the node-to-entry and
 * entry-to-node conversion methods.
 */
export declare class NodeStore {
    readonly store: KeyValueStore;
    readonly metadata: Metadata;
    protected static metadataKey: Uint8Array;
    protected static anchorLeafKey: Uint8Array;
    private readonly limit;
    constructor(store: KeyValueStore, metadata: Metadata);
    protected initialize(): Promise<void>;
    protected setMetadata(metadata: Metadata): Promise<void>;
    protected getMetadata(): Promise<Metadata | null>;
    getNode(level: number, key: Key): Promise<Node | null>;
    protected setNode(node: Node): Promise<void>;
    protected deleteNode(level: number, key: Key): Promise<void>;
    nodes(level: number, lowerBound?: Bound<Key> | null, upperBound?: Bound<Key> | null, { reverse }?: {
        reverse?: boolean;
    }): AsyncIterableIterator<Node>;
    protected parseEntry([entryKey, entryValue]: Entry): Node;
    protected static parseEntryKey(entryKey: Uint8Array): [level: number, key: Key];
    protected static createEntryKey(level: number, key: Key): Uint8Array;
    private static size;
    private static view;
    hashEntry(key: Uint8Array, value: Uint8Array): Uint8Array;
    protected isSplit(hash: Uint8Array): boolean;
    protected getLeafAnchorHash: () => Uint8Array;
}
//# sourceMappingURL=store.d.ts.map