var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Secp256k1Signer_privateKey;
import { secp256k1 } from "@noble/curves/secp256k1";
import { varint } from "multiformats";
import { base58btc } from "multiformats/bases/base58";
import { getCID } from "./cid.js";
export class Secp256k1Signer {
    /**
     * @param privateKey 33-byte secp256k1 private key
     */
    constructor(privateKey = secp256k1.utils.randomPrivateKey()) {
        _Secp256k1Signer_privateKey.set(this, void 0);
        const encodingLength = varint.encodingLength(Secp256k1Signer.code);
        const publicKey = secp256k1.getPublicKey(privateKey);
        const bytes = new Uint8Array(encodingLength + publicKey.byteLength);
        varint.encodeTo(Secp256k1Signer.code, bytes, 0);
        bytes.set(publicKey, encodingLength);
        this.uri = `did:key:${base58btc.encode(bytes)}`;
        __classPrivateFieldSet(this, _Secp256k1Signer_privateKey, privateKey, "f");
    }
    sign(value, options = {}) {
        const cid = getCID(value, options);
        const signature = secp256k1.sign(cid.bytes, __classPrivateFieldGet(this, _Secp256k1Signer_privateKey, "f")).toCompactRawBytes();
        return { publicKey: this.uri, signature, cid };
    }
    export() {
        return { type: "secp256k1", privateKey: __classPrivateFieldGet(this, _Secp256k1Signer_privateKey, "f") };
    }
}
_Secp256k1Signer_privateKey = new WeakMap();
Secp256k1Signer.type = "secp256k1";
Secp256k1Signer.code = 0xe7;
