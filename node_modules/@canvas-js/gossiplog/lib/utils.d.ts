import type { PeerId } from "@libp2p/interface";
export declare class SyncDeadlockError extends Error {
}
export declare class SyncTimeoutError extends Error {
}
export declare class SyncResourceError extends Error {
}
export declare const cborNull: Uint8Array;
export declare const topicPattern: RegExp;
/** Logarithmic clock decay */
export declare function getAncestorClocks(clock: number): Iterable<number>;
export declare function sortPair(a: PeerId, b: PeerId): [x: PeerId, y: PeerId];
export declare function assert(condition: unknown, message?: string): asserts condition;
export declare function signalInvalidType(type: never): never;
export declare function collect<I, O = I>(iter: AsyncIterable<I>, map?: (value: I) => O): Promise<O[]>;
export declare function wait(interval: number, options: {
    signal: AbortSignal;
}): Promise<void>;
export declare class DelayableController {
    #private;
    signal: AbortSignal;
    constructor(interval: number);
    delay(): void;
}
export declare class CacheMap<K, V> extends Map<K, V> {
    readonly capacity: number;
    constructor(capacity: number, entries?: Iterable<[K, V]>);
    set(key: K, value: V): this;
}
export declare function shuffle<T>(array: T[]): void;
