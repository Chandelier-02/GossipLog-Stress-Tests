import { PeerId, Startable, TypedEventEmitter, PubSub } from "@libp2p/interface";
import { Registrar, ConnectionManager } from "@libp2p/interface-internal";
import type { Signature } from "@canvas-js/signed-cid";
import type { Message, Signer } from "@canvas-js/interfaces";
import { AbstractGossipLog, GossipLogEvents } from "./AbstractGossipLog.js";
import { SyncOptions } from "./sync/service.js";
export type GossipLogServiceComponents = {
    peerId: PeerId;
    registrar: Registrar;
    connectionManager: ConnectionManager;
    pubsub?: PubSub;
};
export interface GossipLogServiceInit {
    sync?: boolean;
}
export declare class GossipLogService extends TypedEventEmitter<GossipLogEvents<unknown, unknown>> implements Startable {
    #private;
    private readonly components;
    private static extractGossipSub;
    static topicPrefix: "canvas/";
    private readonly sync;
    private readonly log;
    constructor(components: GossipLogServiceComponents, init: GossipLogServiceInit);
    isStarted(): boolean;
    start(): Promise<void>;
    afterStart(): Promise<void>;
    beforeStop(): Promise<void>;
    stop(): Promise<void>;
    subscribe<Payload, Result>(messageLog: AbstractGossipLog<Payload, Result>, options?: SyncOptions): Promise<void>;
    unsubscribe(topic: string): Promise<void>;
    private forwardEvent;
    append<Payload, Result>(topic: string, payload: Payload, options?: {
        signer?: Signer<Message<Payload>>;
    }): Promise<{
        id: string;
        result: Result;
        recipients: Promise<PeerId[]>;
    }>;
    insert<Payload, Result = unknown>(signature: Signature, message: Message<Payload>): Promise<{
        id: string;
        recipients: Promise<PeerId[]>;
    }>;
    getTopics(): string[];
    private handleMessage;
}
export declare const gossiplog: (init: GossipLogServiceInit) => (components: GossipLogServiceComponents) => GossipLogService;
